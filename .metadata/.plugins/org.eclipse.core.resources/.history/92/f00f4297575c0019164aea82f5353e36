/**
 * \file Journal.cpp
 * \brief Implémentation de la classe Journal
 * \author etudiant
 * \version 1.0
 * \date 2019-04-08
 */

#include "Journal.h"
#include "validationFormat.h"
#include <sstream>

namespace biblio
{
	/**
	 * \brief crée un instance de Journal
	 * \param[in] p_auteurs un string listant les auteurs
	 * \param[in] p_titre le titre de la référence sous forme de string
	 * \param[in] p_annee un int représantant l'année
	 * \param[in] p_identifiant le string de l'identifiant
	 * \param[in] p_nom le string du nom
	 * \param[in] p_volume un int représantant le volume
	 * \param[in] p_numero un int représantant le numéro
	 * \param[in] p_page un int représantant la page
	 * \pre p_auteurs n'est pas nul et respecte le format donné par util::validerFormatNom()
	 * \pre p_titre n'est pas nul
	 * \pre p_annee est plus grand que 0
	 * \pre n'est pas nul et est un code ISBN valide
	 * \pre p_nom n'est pas nul et respecte le format donné par util::validerFormatNom()
	 * \pre p_volume est plus grand que 0
	 * \pre p_numero est plus grand que 0
	 * \pre p_page est plus grand que 0
	 * \post m_auteurs prend la valeur de p_auteurs
	 * \post m_titre prend la valeur de p_titre
	 * \post m_annee prend la valeur de p_annee
	 * \post m_identifiant prend la valeur de p_identifiant
	 * \post m_nom prend la valeur de p_nom
	 * \post m_volume prend la valeur de p_volume
	 * \post m_numero prend la valeur de p_numero
	 * \post m_page prend la valeur de p_page
	 */
	Journal::Journal(const std::string& p_auteurs, const std::string& p_titre,
	        int& p_annee, const std::string& p_identifiant,
	        const std::string& p_nom, int& p_volume, int& p_numero, int& p_page) :
			Reference(p_auteurs, p_titre, p_annee, p_identifiant), m_nom(p_nom), m_volume(
			        p_volume), m_numero(p_numero), m_page(p_page)
	{
		PRECONDITION(util::validerCodeIssn(p_identifiant));
		PRECONDITION(!(p_nom.empty()) && util::validerFormatNom(p_nom));
		PRECONDITION(p_volume > 0);
		PRECONDITION(p_numero > 0);
		PRECONDITION(p_page > 0);

		POSTCONDITION(p_nom == p_nom);
		POSTCONDITION(p_volume == p_volume);
		POSTCONDITION(p_numero == p_numero);
		POSTCONDITION(p_page == p_page);

		INVARIANTS();
	}

	/**
	 * Retourne le nom de la référence
	 * \return le string du nom
	 */
	const std::string& Journal::reqNom() const
	{
		return m_nom;
	}

	/**
	 * Retourne le numéro de la référence
	 * \return  le int du numéro
	 */
	int Journal::reqNumero() const
	{
		return m_numero;
	}

	/**
	 * Retourne la page de la référence
	 * \return  le int de la page
	 */
	int Journal::reqPage() const
	{
		return m_page;
	}

	/**
	 * Retourne le volume de la référence
	 * \return  le int du volume
	 */
	int Journal::reqVolume() const
	{
		return m_volume;
	}

	/**
	 * \brief crée un clone de l'objet
	 * \return un objet de type Journal qui possède les mêmes propriétés que l'objet initial.
	 */
	Reference* Journal::clone() const
	{
		return new Journal(*this);
	}

	/**
	 * La représentation textuelle de la référence
	 * \return un string sous la forme "m_auteur. m_titre. m_nom, vol. m_volume, no. m_numero, pp. m_page,
	 * 			m_annee. m_iditenfiant."
	 */
	std::string Journal::reqReferenceFormate() const
	{
		std::ostringstream oss;
		oss << Reference::reqReferenceFormate() << " " << reqNom() << ", vol. "
		        << reqVolume() << ", no. " << reqNumero() << ", pp. "
		        << reqPage() << ", " << reqAnnee() << ". " << reqIdentifiant()
		        << ".";
		return oss.str();
	}

	/**
	 * \brief Vérifie les invariants de la classe
	 */
	void Journal::verifieInvariant() const
	{
		INVARIANT(!(m_nom.empty()));
		INVARIANT(m_numero > 0);
		INVARIANT(m_page > 0);
		INVARIANT(m_volume > 0);
	}
}  // namespace biblio

