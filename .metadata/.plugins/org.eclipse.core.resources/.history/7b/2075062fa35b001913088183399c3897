/**
 * \file Journal.cpp
 * \brief TODO
 * \author etudiant
 * \version 1.0
 * \date 2019-04-08
 */

#include "Journal.h"
#include "validationFormat.h"

namespace biblio
{
	/**
	 * \brief crée un instance de Journal
	 * \param[in] p_auteurs un string listant les auteurs
	 * \param[in] p_titre le titre de la référence sous forme de string
	 * \param[in] p_annee un int représantant l'année
	 * \param[in] p_identifiant le string de l'identifiant
	 * \param[in] p_editeur le string de l'éditeur
	 * \param[in] p_ville le string de la ville
	 * \pre p_auteurs n'est pas nul et respecte le format donné par util::validerFormatNom()
	 * \pre p_titre n'est pas nul
	 * \pre p_annee est plus grand que 0
	 * \pre n'est pas nul et est un code ISBN valide
	 * \pre p_editeur n'est pas nul et respecte le format donné par util::validerFormatNom()
	 * \pre p_ville n'est pas nul et respecte le format donné par util::validerFormatNom()
	 * \post m_auteurs prend la valeur de p_auteurs
	 * \post m_titre prend la valeur de p_titre
	 * \post m_annee prend la valeur de p_annee
	 * \post m_identifiant prend la valeur de p_identifiant
	 * \post m_editeur prend la valeur de p_editeur
	 * \post m_ville prend la valeur de p_ville
	 */
	Journal::Journal(const std::string& p_auteurs, const std::string& p_titre,
	        int& p_annee, const std::string& p_identifiant,
	        const std::string& p_nom, int& p_volume, int& p_numero, int& p_page) :
			Reference(p_auteurs, p_titre, p_annee, p_identifiant), m_nom(p_nom), m_volume(
			        p_volume), m_numero(p_numero), m_page(p_page)
	{
	}

	/**
	 * Retourne le nom de la référence
	 * \return le string du nom
	 */
	const std::string& Journal::reqNom() const
	{
		return m_nom;
	}

	/**
	 * Retourne l'année de la référence
	 * \return  le int de l'année
	 */
	int Journal::reqNumero() const
	{
		return m_numero;
	}

	/**
	 * Retourne l'année de la référence
	 * \return  le int de l'année
	 */
	int Journal::reqPage() const
	{
		return m_page;
	}

	/**
	 * Retourne l'année de la référence
	 * \return  le int de l'année
	 */
	int Journal::reqVolume() const
	{
		return m_volume;
	}

	/**
	 * \brief crée un clone de l'objet
	 * \return un objet de type Journal qui possède les mêmes propriétés que l'objet initial.
	 */
	Reference* Journal::clone() const
	{
		return new Journal(*this);
	}

	/**
	 * La représentation textuelle de la référence
	 * \return un string sous la forme "m_auteur. m_titre. m_ville : m_editeur, m_annee. m_iditenfiant."
	 */
	std::string Journal::reqReferenceFormate() const
	{
	}

	/**
	 * \brief Vérifie les invariants de la classe
	 */
	void Journal::verifieInvariant() const
	{
		INVARIANT(!(m_nom.empty()));
		INVARIANT(m_numero > 0);
		INVARIANT(m_page > 0);
		INVARIANT(m_volume > 0);
	}
}  // namespace biblio

