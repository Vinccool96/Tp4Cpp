/**
 * \file Bibliographie_Testeur.cpp
 * \brief Fichier test pour la classe Bibliographie
 * \author etudiant
 * \version 1.0
 * \date 2019-04-10
 */

#include <gtest/gtest.h>
#include <iostream>
#include <sstream>
#include "Bibliographie.h"
#include "Ouvrage.h"
#include "Journal.h"

using namespace biblio;

int annee = 2030;
int volume = 30;
int numero = 69;
int page = 420;

//On v√©rifie si le vecteur est bel et bien vide
TEST(Bibliographie, Constructeur)
{
	try
	{
		Bibliographie bibli("Biblio");
	} catch (ContratException e)
	{
		ASSERT_TRUE(false);
	}
	ASSERT_TRUE(true);
}

class bibliographieTest: public ::testing::Test
{
	public:
		bibliographieTest() :
				bibli("Biblio")
		{
			Ouvrage ouvrage1("Albert Einstein", "Mein Kampf", annee,
			        "ISBN 978-2-1234-5680-3", "Illuminatis Inc", "Berlin");
			Ouvrage ouvrage2("Albert Einstein", "Mein Kampf", annee,
			        "ISBN 0-201-89551-X", "Illuminatis Inc", "Berlin");
			Journal journal1("Albert Einstein", "Mein Kampf", annee,
			        "ISSN 0395-2037", "Philosophie moderne", volume, numero,
			        page);
			Journal journal2("Albert Einstein", "Mein Kampf", annee,
			        "ISSN 0395-2037", "Philosophie moderne", volume, numero,
			        page);
		}
		Bibliographie bibli;
};

TEST_F(bibliographieTest, reqNom)
{
	ASSERT_TRUE("Biblio" == bibli.reqNom());
}

TEST_F(bibliographieTest, ajouterReference)
{
	ASSERT_EQ("Biblio\n===============================\n",
	        bibli.reqBibliographieFormate());
}

TEST_F(bibliographieTest, reqBibliographieFormate)
{
	ASSERT_EQ("Biblio\n===============================\n",
	        bibli.reqBibliographieFormate());
}
