/**
 * \file Ouvrage.cpp
 * \brief TODO
 * \author etudiant
 * \version 1.0
 * \date 2019-04-07
 */

#include "Ouvrage.h"
#include "validationFormat.h"
#include <sstream>

namespace biblio
{

	/**
	 * \brief crée un instance de Ouvrage
	 * \param[in] p_auteurs un string listant les auteurs
	 * \param[in] p_titre le titre de la référence sous forme de string
	 * \param[in] p_annee un int représantant l'année
	 * \param[in] p_identifiant le string de l'identifiant
	 * \param[in] p_editeur le string de l'éditeur
	 * \param[in] p_ville le string de la ville
	 * \pre p_auteurs n'est pas nul et respecte le format donné par util::validerFormatNom()
	 * \pre p_titre n'est pas nul
	 * \pre p_annee est plus grand que 0
	 * \pre n'est pas nul et est un code ISBN valide
	 * \pre p_editeur n'est pas nul et respecte le format donné par util::validerFormatNom()
	 * \pre p_ville n'est pas nul et respecte le format donné par util::validerFormatNom()
	 * \post m_auteurs prend la valeur de p_auteurs
	 * \post m_titre prend la valeur de p_titre
	 * \post m_annee prend la valeur de p_annee
	 * \post m_identifiant prend la valeur de p_identifiant
	 * \post m_editeur prend la valeur de p_editeur
	 * \post m_ville prend la valeur de p_ville
	 */
	Ouvrage::Ouvrage(const std::string& p_auteurs, const std::string& p_titre,
	        int& p_annee, const std::string& p_identifiant,
	        const std::string& p_editeur, const std::string& p_ville) :
			Reference(p_auteurs, p_titre, p_annee, p_identifiant), m_editeur(
			        p_editeur), m_ville(p_ville)
	{
		PRECONDITION(util::validerCodeIsbn(p_identifiant));
	}

	const std::string& Ouvrage::reqEditeur() const
	{
		return m_editeur;
	}

	const std::string& Ouvrage::reqVille() const
	{
		return m_ville;
	}

	Reference* Ouvrage::clone() const
	{
		return new Ouvrage(*this);
	}

	std::string Ouvrage::reqReferenceFormate() const
	{
		std::ostringstream oss;
		oss << Reference::reqReferenceFormate() << " " << reqVille() << " : "
		        << reqEditeur() << ", " << reqAnnee() << ". "
		        << reqIdentifiant() << ".";
		return oss.str();
	}

	void Ouvrage::verifieInvariant() const
	{
	}

} // namespace biblio
